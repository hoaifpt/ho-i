package com.school_medical.school_medical_management_system.api;

import com.school_medical.school_medical_management_system.models.ApiResponse;
import com.school_medical.school_medical_management_system.models.ApproveAppointmentRequest;
import com.school_medical.school_medical_management_system.repositories.IUserRepository;
import com.school_medical.school_medical_management_system.repositories.entites.Appuser;
import com.school_medical.school_medical_management_system.repositories.entites.MedicalAppointment;
import com.school_medical.school_medical_management_system.services.IMedicalAppointmentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/appointments")
public class MedicalAppointmentController {

    @Autowired
    private IMedicalAppointmentService service;

    @Autowired
    private IUserRepository userRepository;

    /**
     * T·∫°o m·ªõi m·ªôt cu·ªôc h·∫πn
     */
    @PostMapping("/create")
    public ResponseEntity<?> createAppointment(@RequestBody MedicalAppointment appointment) {
        try {   
            // ‚úÖ L·∫•y email ng∆∞·ªùi d√πng t·ª´ JWT token
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            String email = auth.getName();

            // ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo email
            Appuser user = userRepository.getUserByEmail(email);
            if (user == null) {
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng.");
            }

            // ‚úÖ Ki·ªÉm tra roleId kh√¥ng b·ªã null
            if (user.getRoleId() == null) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c g√°n vai tr√≤.");
            }

            // ‚úÖ Ki·ªÉm tra b·∫Øt bu·ªôc ph·∫£i c√≥ studentId
            if (appointment.getStudentId() == 0) {
                return ResponseEntity.badRequest().body("Vui l√≤ng ch·ªçn h·ªçc sinh.");
            }

            int roleId = user.getRoleId();
            int userId = user.getId();

            if (roleId == 3) { // üë©‚Äç‚öïÔ∏è Nurse
                appointment.setNurseId(userId);
                appointment.setParentUserId(null); // nurse t·ª± t·∫°o
            } else if (roleId == 4) { // üë™ Parent
                if (appointment.getNurseId() == 0) {
                    return ResponseEntity.badRequest().body("Ph·ª• huynh ph·∫£i ch·ªçn nurse.");
                }
                appointment.setParentUserId(userId); // parent ƒëang ƒëƒÉng nh·∫≠p
            } else {
                return ResponseEntity.status(HttpStatus.FORBIDDEN).body("Vai tr√≤ kh√¥ng h·ª£p l·ªá.");
            }

            // ‚úÖ Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
            appointment.setStatus("Pending");

            // ‚úÖ G·ªçi service l∆∞u l·ªãch h·∫πn
            service.createAppointment(appointment);

            return ResponseEntity.ok("T·∫°o l·ªãch h·∫πn th√†nh c√¥ng!");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body("L·ªói h·ªá th·ªëng: " + e.getMessage());
        }
    }


    /**
     * L·∫•y t·∫•t c·∫£ cu·ªôc h·∫πn c·ªßa m·ªôt sinh vi√™n
     */
    @GetMapping("/student/{studentId}")
    public ResponseEntity<List<MedicalAppointment>> getAppointmentsByStudent(@PathVariable int studentId) {
        List<MedicalAppointment> appointments = service.getAppointmentsByStudentId(studentId);
        return ResponseEntity.ok(appointments);
    }

    /**
     * Ph√™ duy·ªát cu·ªôc h·∫πn
     */
    @PutMapping("/approve")
    public ResponseEntity<?> approveAppointment(@RequestBody ApproveAppointmentRequest request) {
        try {
            String status = request.getStatus();
            if (!status.equalsIgnoreCase("Approved") && !status.equalsIgnoreCase("Rejected")) {
                return ResponseEntity.badRequest().body("Status must be 'Approved' or 'Rejected'");
            }
            service.approveAppointment(request.getAppointmentId(), status);
            return ResponseEntity.ok("Appointment " + status + " successfully");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }

    /**
     * L·∫•y t·∫•t c·∫£ c√°c cu·ªôc h·∫πn
     */
    @GetMapping("/all")
    public ResponseEntity<ApiResponse<List<MedicalAppointment>>> viewAllAppointments() {
        try {
            List<MedicalAppointment> allAppointments = service.getAllAppointments();
            ApiResponse<List<MedicalAppointment>> response = new ApiResponse<>(true, "L·∫•y t·∫•t c·∫£ cu·ªôc h·∫πn th√†nh c√¥ng", allAppointments);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            ApiResponse<List<MedicalAppointment>> response = new ApiResponse<>(false, "L·ªói khi l·∫•y t·∫•t c·∫£ cu·ªôc h·∫πn: " + e.getMessage(), null);
            return ResponseEntity.status(500).body(response);
        }
    }

    /**
     * C·∫≠p nh·∫≠t cu·ªôc h·∫πn
     */
    @PutMapping("/update")
    public ResponseEntity<?> updateAppointment(@RequestBody MedicalAppointment appointment) {
        try {
            service.updateAppointment(appointment);
            return ResponseEntity.ok("Appointment updated successfully");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }

    /**
     * X√≥a cu·ªôc h·∫πn
     */
    @DeleteMapping("/delete/{appointmentId}")
    public ResponseEntity<?> deleteAppointment(@PathVariable int appointmentId) {
        try {
            service.deleteAppointment(appointmentId);
            return ResponseEntity.ok("Appointment deleted successfully");
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }
}
